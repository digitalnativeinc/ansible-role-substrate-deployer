---
- name: Substrate Configure | Create log directory
  ansible.builtin.file:
    path: "/var/log/{{ substrate_node_bin_name }}"
    state: directory
    owner: "{{ substrate_node_user }}"
    group: adm
    mode: "0640"
  when: substrate_node_logging | lower == 'file'

- name: Substrate Configure | Systemd Template file
  ansible.builtin.template:
    src: ./templates/substrate-node.service.j2
    dest: "/etc/systemd/system/{{ substrate_node_bin_name }}.service"
    owner: "{{ substrate_node_user }}"
    group: "{{ substrate_node_group }}"
    mode: "0644"
    trim_blocks: true
    lstrip_blocks: true
  register: _node_template

- name: Substrate Configure | Rotate logs before
  ansible.builtin.command: "logrotate -f /etc/logrotate.d/{{ substrate_node_bin_name }}"
  when:
    - (_node_template.changed or _binary_updated == true)
    - (substrate_node_logrotate_conf_enable | bool and substrate_node_logging | lower == "file")

- name: Substrate Configure | Service start
  ansible.builtin.systemd:
    name: "{{ substrate_node_bin_name }}"
    daemon_reload: true
    state: started
    enabled: true
  register: _node_start

- name: Substrate Configure | Service restart if needed
  ansible.builtin.systemd:
    name: "{{ substrate_node_bin_name }}"
    daemon_reload: true
    state: restarted
    enabled: true
  when:
    - _node_template.changed
    - _node_start.changed == false
  register: _node_restart

- name: Substrate Configure | Wait for service start/restart
  ansible.builtin.pause:
    seconds: 10
  when: _node_start.changed or _node_restart.changed

- block:
    - name: Substrate Configure | Get service invocation ID
      command: "systemctl show -p InvocationID --value {{ substrate_node_bin_name }}"
      register: _systemd_status

    - name: Substrate Configure | Get logs
      command: |
        journalctl _SYSTEMD_INVOCATION_ID="{{ _systemd_status.stdout }}" + INVOCATION_ID="{{ _systemd_status.stdout }}"
      register: service_logs
      ignore_errors: true
      failed_when:
        - 'service_logs.stderr != ""'

    - name: Substrate Configure | Service stdout
      debug:
        msg: "{{ service_logs.stdout }}"
      failed_when:
        - '"Discovered new external address for our node" not in service_logs.stdout'
        - '"error" in service_logs.stdout'
      ignore_errors: true
  when: substrate_node_logging | lower == "syslog"

- block:
    - name: Substrate Configure | Get logs
      command: "tail -n 25 {{ item }}"
      with_items:
        - /var/log/{{ substrate_node_bin_name }}/stdout.log
        - /var/log/{{ substrate_node_bin_name }}/stderr.log
      register: service_logs
      failed_when:
        - '"Discovered new external address for our node" not in service_logs.stdout'
        - '"error" in service_logs.stdout'
      ignore_errors: true

    - name: Substrate Configure | Get logs
      debug:
        msg: "{{ item.stdout }}"
      with_items: "{{ service_logs['results'] }}"
      loop_control:
        label: "{{ item.item }}"
  when: substrate_node_logging | lower == "file"

- name: Substrate Configure | Verify ports are open
  wait_for:
    port: "{{ item }}"
    timeout: 60
  when:
    - item
  with_items:
    - "{{ substrate_node_p2p_port }}"
    - "{{ substrate_node_rpc_port }}"
    - "{{ substrate_node_ws_port }}"
    - "{{ substrate_node_prometheus_port }}"
