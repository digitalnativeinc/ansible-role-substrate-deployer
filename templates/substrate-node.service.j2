{{ ansible_managed | comment }}

[Unit]
Description={{ substrate_node_configuration.friendly_name }} Node
After=network-online.target

[Service]
ExecStart={{ substrate_node_bin_name }} \
--base-path {{ substrate_node_data_dir }} \
--port {{ substrate_node_configuration.p2p_port }} \
{% if substrate_node_configuration.chain | length %}
--chain {{ substrate_node_configuration.chain }} \
{% endif %}
{% if substrate_node_configuration.bootnodes | length %}
--bootnodes {{ substrate_node_configuration.bootnodes }} \
{% endif %}
{% if substrate_node_configuration.node_key | length %}
--node-key-file {{ substrate_node_configuration._node_key_file }} \
{% endif %}
{% if substrate_node_configuration.ws_port | length %}
--ws-port {{ substrate_node_configuration.ws_port }} \
{% endif %}
{% if substrate_node_configuration.ws_external is true %}
--ws-external \
{% endif %}
{% if substrate_node_configuration.rpc_port | length %}
--rpc-port {{ substrate_node_configuration.rpc_port }} \
{% endif %}
{% if substrate_node_configuration.rpc_external is true %}
--rpc-external \
{% endif %}
{% if substrate_node_configuration.rpc_cors | length %}
--rpc-cors {{ substrate_node_configuration.rpc_cors }} \
{% endif %}
{% if substrate_node_configuration.rpc_methods | length %}
--rpc-methods {{ substrate_node_configuration.rpc_methods }} \
{% endif %}
{% if substrate_node_configuration.identity | length %}
--{{ substrate_node_configuration.identity }} \
{% endif %}
{% if substrate_node_configuration.log_level | length %}
--log {{ substrate_node_configuration.log_level }} \
{% endif %}
{% if substrate_node_configuration.prometheus_disable is true %}
--no-prometheus \
{% endif %}
{% if substrate_node_configuration.prometheus_disable is not true and substrate_node_configuration.prometheus_port | length %}
--prometheus-port {{ substrate_node_configuration.prometheus_port }} \
{% endif %}
{% if substrate_node_configuration.prometheus_external is true and substrate_node_configuration.prometheus_disable is not true %}
--prometheus-external \
{% endif %}
{% if substrate_node_configuration.pruning | length %}
--pruning {{ substrate_node_configuration.pruning }} \
{% endif %}
{% if substrate_node_configuration.role | lower == "validator" %}
--validator \
{% endif %}
{% if substrate_node_configuration.role  | lower == "collator" %}
{% if substrate_node_configuration.collator_flag is true %}
--collator \
{% endif %}
--force-authoring \
--parachain-id {{ substrate_node_configuration.parachain_id }} \
{% endif %}
--name "{{ substrate_node_configuration.friendly_name }}" \
{% if substrate_node_configuration.role  | lower == "collator" %}
-- \
--execution wasm \
{% if ssubstrate_node_collator_configuration.chain | length %}
--chain {{ substrate_node_collator_configuration.chain }} \
{% endif %}
{% if substrate_node_collator_configuration.bootnodes | length %}
--bootnodes {{ substrate_node_collator_configuration.bootnodes }} \
{% endif %}
{% if substrate_node_collator_configuration.p2p_port | length %}
--port {{ substrate_node_collator_configuration.p2p_port }} \
{% endif %}
{% if substrate_node_collator_configuration.ws_port | length %}
--ws-port {{ substrate_node_collator_configuration.ws_port }}
{% endif %}
{% endif %}

{% if substrate_node_logging | lower == 'file' %}
StandardOutput=append:/var/log/{{ substrate_node_bin_name }}/stdout.log
StandardError=append:/var/log/{{ substrate_node_bin_name }}/stderr.log
{% elif substrate_node_logging | lower == 'syslog' %}
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=â€‹{{ substrate_node_bin_name }}
{% endif %}

WorkingDirectory={{ substrate_node_bin_dir }}
Type=simple
User={{ substrate_node_user }}
Group={{ substrate_node_group }}
{% if substrate_node_restart == 'always' %}
Restart=always
{% elif substrate_node_restart != 'always' %}
Restart={{ substrate_node_restart }}
{% endif %}
RestartSec=120

[Install]
WantedBy=multi-user.target