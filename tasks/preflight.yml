---
- name: Substrate Prelim | Assert usage of systemd as an init system
  assert:
    that: ansible_service_mgr == 'systemd'
    fail_msg: "This role only works with systemd"
    success_msg: "Systemd used"

- name: Substrate Prelim | Check these vars are defined
  assert: 
    that: "{{ item }} is defined"
    fail_msg: "Required variable {{ item }} is not defined"
    success_msg: Variable set
  loop: 
    - substrate_node_role
    - substrate_node_friendly_name
    - substrate_node_source
    - substrate_node_user
    - substrate_node_group
    - substrate_node_bin_name
    - substrate_node_bin_dir
    - substrate_node_logging
    - substrate_node_data_dir
    - substrate_node_p2p_port

- name: Substrate Prelim | Check ports are numeric values
  assert: 
    that: 
      - "{{ item }} | type_debug == 'int'"
      - "{{ item }} > 0"
      - "{{ item }} <= 65535"
    fail_msg: Port must be numeric and uint16
    success_msg: Port set properly
  loop:
    - substrate_node_p2p_port
    - substrate_node_rpc_port
    - substrate_node_ws_port
    - substrate_node_prometheus_port

- name: Substrate Prelim | Check variables are booleans
  assert: 
    that: "{{ item }} | type_debug == 'bool'"
    fail_msg: Variable must be boolean
    success_msg: Boolean variable set correctly
  loop:
    - substrate_node_preflight
    - substrate_node_install
    - substrate_node_configure
    - substrate_node_postflight
    - substrate_node_operations
    - substrate_node_selinux_enabled
    - substrate_node_logrotate_conf_enable
    - substrate_node_rpc_external
    - substrate_node_ws_external
    - substrate_node_prometheus_disable
    - substrate_node_prometheus_external
    - substrate_node_collator_flag

- name: Substrate Prelim | Check logging option is properly defined
  assert: 
    that: substrate_node_logging | lower in ["syslog", "file"]
    fail_msg: Logging must be set to 'syslog' or 'file'
    success_msg: Logging option set correctly

- name: Substrate Prelim | Check logging option is properly defined
  assert: 
    that: substrate_node_identity | lower in substrate_node_identity_options
    fail_msg: Identity must be set to one of the pre-defined values
    success_msg: Identity option set correctly
  when: substrate_node_identity != ""

- name: Substrate Prelim | Check pruning option is properly defined
  assert: 
    that: substrate_node_pruning | lower in ["archive", "constrained"]
    fail_msg: Pruning must be set to 'archive' or 'constrained'
    success_msg: Pruning option set correctly
  when: substrate_node_pruning != ""

- name: Substrate Prelim | Check node execution option is properly defined
  assert: 
    that: substrate_node_execution | lower in ["native", "wasm", "both", "nativeelsewasm"]
    fail_msg: "Node Execution must be set to one of the following: Native | Wasm | Both | NativeElseWasm"
    success_msg: Node execution option set correctly
  when: substrate_node_execution != ""

- name: Substrate Prelim | RedHat Redendecies install
  block:
    - name: Substrate RedHat | Install selinux python packages [RHEL]
      package:
        name:
          - "{{ ( (ansible_facts.distribution_major_version | int) < 8) | ternary('libselinux-python','python3-libselinux') }}"
          - "{{ ( (ansible_facts.distribution_major_version | int) < 8) | ternary('policycoreutils-python','python3-policycoreutils') }}"
        state: present
      register: _install_selinux_packages
      until: _install_selinux_packages is success
      retries: 5
      delay: 2

    - name: Substrate RedHat | Configure SELinux for substrate node
      ansible.posix.seboolean:
        name: "{{  }}"
        state: true
        persistent: true
  when:
    - substrate_node_selinux_enabled
    - substrate_node_group != 'root'
    - ansible_os_family == 'RedHat'

- name: Substrate Prelim | RedHat Redendecies install
  block:
    - name: Substrate SELinux | Install selinux python packages [Fedora]
      package:
        name:
          - "{{ ( (ansible_facts.distribution_major_version | int) < 29) | ternary('libselinux-python','python3-libselinux') }}"
          - "{{ ( (ansible_facts.distribution_major_version | int) < 29) | ternary('policycoreutils-python','python3-policycoreutils') }}"
        state: present
      register: _install_selinux_packages
      until: _install_selinux_packages is success
      retries: 5
      delay: 2
  when:
    - ansible_os_family == 'Debian'
    - substrate_node_selinux_enabled

- name: Substrate User | Add system group
  ansible.builtin.group:
    name: "{{ substrate_node_group }}"
    system: true
    state: present
  when: substrate_node_group != "root"

- name: Substrate User | Add user
  ansible.builtin.user:
    name: "{{ substrate_node_user }}"
    state: present
    groups:
      - "{{ substrate_node_group }}"
      - "adm"
  when: substrate_node_user != "root"

- name: Substrate User | Adjust permissions for data dir
  ansible.builtin.file:
    path: "{{ substrate_node_data_dir }}"
    state: directory
    owner: "{{ substrate_node_user }}"
    group: "{{ substrate_node_group }}"
    mode: "0744"
    recurse: true

- name: Substrate Logrotate | Setup logrotate
  block:
    - name: Substrate Logrotate | Install logrotate (Alpine Linux)
      ansible.builtin.package:
        name: logrotate
        state: present

    - name: Substrate Logrotate | Set up logrotate (SLES)
      block:
        - name: Substrate Logrotate | Configure logrotate repository (SLES)
          zypper_repository:
            repo: https://download.opensuse.org/repositories/openSUSE:Leap:42.1/standard/openSUSE:Leap:42.1.repo

        - name: Substrate Logrotate | Install Logrotate (SLES)
          zypper:
            name: logrotate
            state: present
      when: ansible_facts['os_family'] == "Suse"

    - name: Substrate Logrotate | Create logrotate config
      template:
        src: logrotate.j2
        dest: "/etc/logrotate.d/{{ substrate_node_bin_name }}"
        owner: root
        group: root
        mode: "0644"
  when:
    - substrate_node_logrotate_conf_enable | bool
    - substrate_node_logging | lower == "file"
