---
- name: Substrate Install | Pull Latest tag
  block:
    - name: Substrate Install | Get repository latest release version
      uri:
        url: "{{ substrate_node_releases }}"
        method: GET
        status_code: 200
      register: latest_version

    - name: Substrate Install | Set fact for release
      set_fact:
        substrate_node_latest_version: "{{ latest_version.json.tag_name }}"
  when:
    - substrate_node_version == 'latest'
    - substrate_node_repository != ""

- name: Substrate Install | Download source
  block:
    - name: Substrate Install | Binary release download
      get_url:
        url: "{{ substrate_node_source }}"
        dest: "{{ _substrate_node_bin_path }}"
        owner: "{{ substrate_node_user }}"
        group: "{{ substrate_node_group }}"
        force: true
        mode: a+x
        backup: true
      register: _release_download
      until: _release_download is succeeded
      retries: 5
      delay: 2

    - name: Substrate Install | Set fact
      set_fact:
        _binary_updated: true
        _backup_path: "{{ _release_download.backup_file | default('Undefined') }}"
      when: _release_download.changed
  when:
    - '"://" in substrate_node_source'
    - '".tar.gz" not in substrate_node_source'

- name: Substrate Install | Archive release push
  block:
    - block:
        - name: Substrate Install | Unarchive a file to remote
          ansible.builtin.unarchive:
            src: "{{ substrate_node_source }}"
            dest: /tmp
            remote_src: "{{ ('://' in substrate_node_source ) | ternary(true, false) }}"
            list_files: true
          register: _unarchive_output

        - name: Substrate Install | List unarchived files
          debug:
            var: _unarchive_output.files
      when: '".tar.gz" in substrate_node_source'

    - name: Substrate Install | Move file
      ansible.builtin.copy:
        src: "{{ ( '://' in substrate_node_source ) | ternary(_unarchive_output.files[0], substrate_node_source) }}"
        dest: "{{ _substrate_node_bin_path }}"
        remote_src: "{{ ( '://' in substrate_node_source ) | ternary(true, false) }}"
        owner: "{{ substrate_node_user }}"
        group: "{{ substrate_node_group }}"
        mode: a+x
        backup: true
        force: true
      register: _release_push

    - name: Substrate Install | Set fact
      set_fact:
        _binary_updated: true
        _backup_path: "{{ _release_push.backup_file | default('Undefined') }}"
      when: _release_push.changed
  when:
    - '"://" not in substrate_node_source'
