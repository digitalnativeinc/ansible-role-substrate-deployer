---
- name: Substrate Install | Pull Latest tag
  block:
    - name: Substrate Install | Get repository latest release version
      uri:
        url: "{{ substrate_node_releases }}"
        method: GET
        status_code: 200
      register: latest_version

    - name: Substrate Install | Set fact for release
      set_fact:
        substrate_node_latest_version: "{{ latest_version.json.tag_name }}"
  when:
    - substrate_node_version == 'latest'
    - substrate_node_repository != ""

- name: Substrate Install | Download source
  block:
    - name: Substrate Install | Download source
      get_url:
        url: "{{ substrate_node_source }}"
        # dest: "{{ _substrate_node_bin_path }}"
        dest: "{{ ('://' in substrate_node_source ) | ternary(_substrate_node_bin_path, /tmp) }}"
        owner: "{{ substrate_node_user }}"
        group: "{{ substrate_node_group }}"
        headers: "{{ substrate_node_get_url_headers is not null | ternary(substrate_node_get_url_headers, default(omit)) }}"
        # force: true
        force: "{{ ('://' in substrate_node_source ) | ternary(true, false) }}"
        mode: a+x
        # backup: true
        backup: "{{ ('://' in substrate_node_source ) | ternary(true, false) }}"
      register: _download_output
      until: _download_output is succeeded
      retries: 5
      delay: 2
  when:
    - '"://" in substrate_node_source'

- name: Substrate Install | Push
  block:
    - name: Substrate Install | Push from local
      ansible.builtin.copy:
        src: "{{ substrate_node_source }}"
        # dest: "{{ _substrate_node_bin_path }}"
        dest: "{{ ('.tar.gz' in substrate_node_source ) | ternary(_substrate_node_bin_path, /tmp) }}"
        # remote_src: "{{ ( '://' in substrate_node_source ) | ternary(true, false) }}"
        remote_src: false
        owner: "{{ substrate_node_user }}"
        group: "{{ substrate_node_group }}"
        mode: 0744
        # backup: true
        backup: "{{ ('.tar.gz' not in substrate_node_source ) | ternary(true, false) }}"
        # force: true
        force: "{{ ('.tar.gz' not in substrate_node_source ) | ternary(true, false) }}"
      register: _push_output

  when:
    - '"://" not in substrate_node_source'

- name: Substrate Install | Archive release push
  block:
    - name: Substrate Install | Unarchive a file to remote
      ansible.builtin.unarchive:
        src: "/tmp/{{ ( _push_output.changed | bool ) | ternary(_push_output.dest, _download_output.dest) }}"
        dest: /tmp
        # remote_src: "{{ ('://' in substrate_node_source ) | ternary(true, false) }}"
        remote_src: true
        list_files: true
      register: _unarchive_output
      when: _push_output.changed or _download_output.changed

    - name: Substrate Install | List unarchived files
      debug:
        var: _unarchive_output.files

    - name: Substrate Install | Move file
      ansible.builtin.copy:
        src: "{{ _unarchive_output.files[0] }}"
        dest: "{{ _substrate_node_bin_path }}"
        remote_src: true
        owner: "{{ substrate_node_user }}"
        group: "{{ substrate_node_group }}"
        mode: 0744
        backup: true
        force: true
      register: _unarchive_push
  when: '".tar.gz" in substrate_node_source'

- name: Substrate Install | Create node key file
  copy:
    content: "{{ substrate_node_key }}"
    dest: "{{ _substrate_node_key_path }}"
    force: true
    owner: "{{ substrate_node_user }}"
    group: "{{ substrate_node_group }}"
    mode: 0644
  no_log: true
  when: substrate_node_key | length

- name: Substrate Install | Ensure node key is removed if not specified
  file:
    state: absent
    dest: "{{ _substrate_node_key_path }}"
    force: true
  no_log: true
  when: substrate_node_key == ""
# - name: Substrate Install | Set fact
#   set_fact:
#     _binary_updated: true
#     _backup_path: "{{ _release_push.backup_file | default('Undefined') }}"
#   when:
#     _release_push.changed or _unarchive_push.changed or _download_output.changed

# - name: Substrate Install | Set fact
#   set_fact:
#     # _binary_updated: true
#     _binary_updated: "{{ ('.tar.gz' not in substrate_node_source ) | ternary(true, false) }}"
#     _backup_path: "{{ _push_output.backup_file | default('Undefined') }}"
#   when: _push_output.changed

# - name: Substrate Install | Set fact
#   set_fact:
#     # _binary_updated: true
#     _binary_updated: "{{ ('://' in substrate_node_source ) | ternary(true, false) }}"
#     _backup_path: "{{ _download_output.backup_file | default('Undefined') }}"
#   when: _download_output.changed
