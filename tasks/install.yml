---
- name: Substrate Install | Download source
  block:
    - name: Substrate Install | Pull Latest tag
      block:
        - name: Substrate Install | Get latest release of a public repository
          become: false
          community.general.github_release:
            user: digitalnativeinc
            repo: standard-substrate
            action: latest_release
          register: release

        - name: Substrate Install | Set fact for release
          set_fact:
            substrate_node_latest_version: "{{ release.tag }}"
      when:
        - substrate_node_version == 'latest'

    - name: Substrate Install | Binary release download
      block:
        - name: Substrate Install | Download release
          get_url:
            url: "{{ substrate_node_source }}"
            dest: "{{ _substrate_node_bin_path }}"
            owner: "{{ substrate_node_user }}"
            group: "{{ substrate_node_group }}"
            mode: a+x
            backup: true
          register: release_install
          until: release_install is succeeded
          retries: 5
          delay: 2
      when:
        - '".tar.gz" not in substrate_node_source'

    - name: Substrate Install | Archive release download
      block:
        - name: Substrate Install | Unarchive a file that needs to be downloaded
          ansible.builtin.unarchive:
            src: "{{ substrate_node_source }}"
            dest: /tmp
            remote_src: true
            owner: "{{ substrate_node_user }}"
            group: "{{ substrate_node_group }}"
            list_files: true
          register: release_install

        - name: Substrate Install | Move unarchived file
          ansible.builtin.copy:
            src: "/tmp/{{ release_install.files[0] }}"
            dest: "{{ _substrate_node_bin_path }}"
            remote_src: true
            owner: "{{ substrate_node_user }}"
            group: "{{ substrate_node_group }}"
            mode: a+x
            backup: true
          register: release_install
      when:
        - '".tar.gz" in substrate_node_source'
  when:
    - '"http" in substrate_node_source'

- name: Substrate Install | Push source
  block:
    - name: Substrate Install | Binary release push
      block:
        - name: Copy file with owner and permissions
          ansible.builtin.copy:
            src: "{{ substrate_node_source }}"
            dest: "{{ _substrate_node_bin_path }}"
            owner: "{{ substrate_node_user }}"
            group: "{{ substrate_node_group }}"
            mode: a+x
          register: release_install
      when:
        - '".tar.gz" not in substrate_node_source'

    - name: Substrate Install | Archive release push
      block:
        - name: Substrate Install | Unarchive a file that needs to be downloaded
          ansible.builtin.unarchive:
            src: "{{ substrate_node_source }}"
            dest: /tmp
            remote_src: false
            owner: "{{ substrate_node_user }}"
            group: "{{ substrate_node_group }}"
            list_files: true
          register: release_install

        - name: Substrate Install | List unarchived files
          debug:
            var: release_install.files

        - name: Substrate Install | Move unarchived file
          ansible.builtin.copy:
            src: "/tmp{{ elease_push.files[0] }}"
            dest: "{{ _substrate_node_bin_path }}"
            remote_src: true
            owner: "{{ substrate_node_user }}"
            group: "{{ substrate_node_group }}"
            mode: a+x
            backup: true
          register: release_install
      when:
        - '".tar.gz" in substrate_node_source'
  when:
    - '"http" not in substrate_node_source'

- name: Substrate Install | Backup file location
  debug:
    msg: "{{ release_move.backup_file }}"
  when:
    - release_install.backup_file is defined
    - release_install.backup_file != ""
